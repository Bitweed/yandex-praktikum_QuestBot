import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    ReplyKeyboardRemove
from database import Database
import os
import random


TOKEN = os.environ.get("TOKEN")
bot = telebot.TeleBot(TOKEN)
db_file: str = 'data.db'


def keyboard_create(buttons) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for button_text in buttons:
        markup.add(telebot.types.KeyboardButton(button_text))
    return markup


def check_step(user_id, step) -> bool:
    with Database(db_file) as db:
        user_data = db.get_user_data(user_id)
    if user_data is None or user_data[2] < step:  # –ü—Ä–µ—Ä–≤—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ!
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_id}] –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–≥ {step}!')
        return False
    return True


@bot.message_handler(commands=['start'])
def send_welcome(message: Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—é—â–µ–µ –∫–Ω–æ–ø–∫—É."""

    user_id: int = message.from_user.id
    image: str = random.choice(('media/house.jpg', 'media/house2.jpg', 'media/house3.jpg'))
    text: str = ('–°–ª—É—à–∞–π, {}, —É –º–µ–Ω—è –µ—Å—Ç—å –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è. –í —Å—Ç–∞—Ä–æ–º –¥–æ–º–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º *325* —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–∫—Ä–æ–≤–∏—â–∞,'
                 '–∏ —è —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –∏—Ö —É–∫—Ä–∞–ª. –≠—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ—Ä. '
                 '–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –∏ —É–º–µ–ª–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏. –ö—Å—Ç–∞—Ç–∏, –¥–µ—Ä–∂–∏ –æ—Ç–º—ã—á–∫—É. –£–¥–∞—á–∏! üó∫')
    markup = keyboard_create(['–Ø –≥–æ—Ç–æ–≤!'])

    # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    with Database(db_file) as db:
        db.save_user_data(user_id, False, 0)
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_id}] —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω.')

    bot.send_photo(
        chat_id=user_id,
        photo=open(image, 'rb'),
        caption=text.format(message.from_user.first_name),
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message: message.text == "–Ø –≥–æ—Ç–æ–≤!")
def send_image_with_keyboard(message) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '–Ø –≥–æ—Ç–æ–≤!'."""

    user_id: str = message.from_user.id
    # –ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫—É –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞?
    if not check_step(user_id, 0):
        return

    chat_id: str = message.chat.id
    keyboard = keyboard_create(['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–º—ã—á–∫—É üóù', '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –æ–∫–Ω–æ ü™ü'])
    photo: str = 'media/first_step.jpg'
    text: str = '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–±, –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –¥–æ–º.'

    bot.send_photo(
        chat_id=chat_id,
        photo=open(photo, 'rb'),
        caption=text,
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda message: message.text == "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –æ–∫–Ω–æ ü™ü")
def handle_window_button(message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –æ–∫–Ω–æ."""

    user_id: str = message.from_user.id
    # –ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫—É –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞?
    if not check_step(user_id, 0):
        return

    chat_id: str = message.chat.id
    image: str = random.choice(('media/laser.jpg', 'media/laser2.jpg'))
    text: str = '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –ª–æ–≤—É—à–∫—É! –ò–≥—Ä–∞ –æ–∫–Ω–æ—á–µ–Ω–∞...'
    markup = keyboard_create(['–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚¨ÖÔ∏è'])

    # # –£–¥–∞–ª–∏–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    # bot.delete_message(chat_id, message.message_id + 1)

    bot.send_photo(
        chat_id=chat_id,
        caption=text,
        photo=open(image, 'rb'),
        reply_markup=markup
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç.–∫. –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª.
    with Database(db_file) as db:
        db.save_user_data(user_id, False, -1)


@bot.message_handler(func=lambda message: message.text in ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–º—ã—á–∫—É üóù", "–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ ü™ú"))
def handle_window_button(message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –¥–≤–µ—Ä—å."""

    user_id: str = message.from_user.id
    # –ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫—É –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞?
    if not check_step(user_id, 0):
        return

    chat_id: str = message.chat.id
    image: str = 'media/room_0.jpg'
    text: str = '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ. –ú–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É, –ª–∏–±–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂.'
    markup = keyboard_create(["–ü–æ–¥–Ω—è—Ç—å—Å—è ü™ú", "–ü—Ä–æ–π—Ç–∏ –Ω–∞ –∫—É—Ö–Ω—é üö™"])

    bot.send_photo(
        chat_id=chat_id,
        caption=text,
        photo=open(image, 'rb'),
        reply_markup=markup
    )

    # –ú–µ–Ω—è–µ–º —à–∞–≥.
    with Database(db_file) as db:
        db.set_user_step(user_id, 1)


@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–Ω—è—Ç—å—Å—è ü™ú")
def handle_window_button(message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂."""

    user_id: str = message.from_user.id
    # –ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫—É –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞?
    if not check_step(user_id, 1):
        return

    chat_id: str = message.chat.id
    image: str = random.choice(('media/safe.jpg', 'media/safe2.jpg'))
    text: str = '–¢—É—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—É—Å—Ç–æ. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–π –∏ —Ä–∂–∞–≤—ã–π —Å–µ–π—Ñ, –ø–æ–∫—Ä—ã—Ç—ã–π –ø–∞—É—Ç–∏–Ω–æ–π üï∏'

    with Database(db_file) as db:
        user_data = db.get_user_data(user_id)

    # –ü–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞.
    if user_data[1]:  # –ö–ª—é—á –µ—Å—Ç—å.
        markup = keyboard_create(["–û—Ç–∫—Ä—ã—Ç—å üîê"])

        with Database(db_file) as db:  # –ú–µ–Ω—è–µ–º —à–∞–≥.
            db.set_user_step(user_id, 3)

    else:  # –ö–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
        markup = keyboard_create(["–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ ü™ú"])

    bot.send_photo(
        chat_id=chat_id,
        caption=text,
        photo=open(image, 'rb'),
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–π—Ç–∏ –Ω–∞ –∫—É—Ö–Ω—é üö™")
def handle_window_button(message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–π–¥–µ—Ç –Ω–∞ –∫—É—Ö–Ω—é."""

    user_id: str = message.from_user.id
    # –ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫—É –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞?
    if not check_step(user_id, 1):
        return

    chat_id: str = message.chat.id
    image: str = 'media/key.jpg'
    text: str = ('–ú–Ω–µ –Ω—É–∂–µ–Ω –∫–∞–∫–æ–π-—Ç–æ –∫–æ–¥, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫. –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –º–Ω–µ –∫—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏–ª –∫–∞–∫–∏–µ-—Ç–æ —Ü–∏—Ñ—Ä—ã, –Ω–æ –Ω–µ '
                 '–º–æ–≥—É –≤—Å–ø–æ–º–Ω–∏—Ç—å –∫—Ç–æ –∏ –≥–¥–µ.')
    markup = keyboard_create(["–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ ü™ú"])

    bot.send_photo(
        chat_id=chat_id,
        caption=text,
        photo=open(image, 'rb'),
        reply_markup=markup
    )

    with Database(db_file) as db:  # –ú–µ–Ω—è–µ–º —à–∞–≥.
        db.set_user_step(user_id, 2)


@bot.message_handler(func=lambda message: message.text == "325")
def check_code(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è –∫—É—Ö–Ω–∏"""

    user_id: str = message.from_user.id

    with Database(db_file) as db:
        has_key = db.get_user_data(user_id)

    # –ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫—É –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞?
    if not check_step(user_id, 2) and has_key:
        return

    image: str = 'media/room_0.jpg'
    text: str = "–ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –ö–ª—é—á —É –≤–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ."
    markup = keyboard_create(["–ü–æ–¥–Ω—è—Ç—å—Å—è ü™ú", "–ü—Ä–æ–π—Ç–∏ –Ω–∞ –∫—É—Ö–Ω—é üö™"])

    bot.send_photo(
        chat_id=message.chat.id,
        caption=text,
        photo=open(image, 'rb'),
        reply_markup=markup
    )

    with Database(db_file) as db:  # –ú–µ–Ω—è–µ–º –¥–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db.save_user_data(user_id, True, 1)


@bot.message_handler(func=lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—å üîê")
def handle_window_button(message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä–æ–µ—Ç —Å–µ–π—Ñ"""

    if not check_step(message.from_user.id, 3):
        return

    chat_id: str = message.chat.id
    text: str = ('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Å–º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—Ñ! –ù—É –∞ —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –±–µ–∂–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —è —É–∂–µ —Å–ª—ã—à—É '
                 '–∑–≤—É–∫ –ø–æ–ª–∏—Ü–µ–π—Å–∫–æ–π —Å–∏—Ä–µ–Ω—ã! üöîüö®')
    image: str = 'media/win.jpg'
    markup = keyboard_create(["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚¨ÖÔ∏è"])

    bot.send_photo(
        chat_id=chat_id,
        caption=text,
        photo=open(image, 'rb'),
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚¨ÖÔ∏è")
def reset_user_data(message):
    """–†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã."""

    user_id: str = message.from_user.id
    markup = keyboard_create(['/start'])

    bot.send_message(
        chat_id=user_id,
        text='–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start',
        reply_markup=markup
    )


bot.polling(none_stop=True)
